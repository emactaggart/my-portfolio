* About
#+begin_src markdown :tangle README.md
# Purpose

This is a toy project for learning lisp as well as maybe a little bit of devops, infrastructure, security, and other stuff.
Oh, and it's a personal website now I guess!
#+end_src

* My-Portfolio
** TODO Don't leak server version, both nginx and hunchentoot
** TODO Pen test and Security Review
  - [ ] Security Review https://www.google.com/search?ei=3o44XdpO2Na1BpXIsvAH&q=hunchentoot+security+review&oq=hunchentoot+security+review&gs_l=psy-ab.3..33i160.106483.107725..107897...0.0..0.216.930.0j6j1......0....1..gws-wiz.......0i71j33i21.g_mCbXDATCI&ved=0ahUKEwjateyPhM7jAhVYa80KHRWkDH4Q4dUDCAo&uact=5
  - [ ] https://zaries.wordpress.com/2010/11/09/lisp-web-server-from-scratch-using-hunchentoot-and-nginx/
  - [ ] https://zaries.wordpress.com/2010/12/22/hunchentoot-webserver-and-application-security/
** TODO Find better Lisp code formatter
** TODO Html, js, and css minifying
** TODO Tree shaking
** TODO Post Deploy Security Review [0/6]
   - [ ] Certificate & Signature
   - [ ] HTTPS
   - [ ] [[https://www.mailgun.com/blog/domain-reputation-and-dmarc][Mailgun Domain Reputation and DMARC]]
   - [ ] [[https://documentation.mailgun.com/en/latest/best_practices.html#reputation][Mailgun Best Practices]]
** TODO Deployable build script
   - [ ] grab vendor dependencies... or store them in the repo...
*** TODO Cleanup control
    Is threading necessary? 
    - [ ] Threading
    - [ ] C-c'ing
 #+begin_src common-lisp
 (defun main ()
   (print "starting server on port 8080")

   ;; this should be in the thread?
   (start-server)
   ;; let the webserver run.
   ;; warning: hardcoded "hunchentoot".
   (handler-case (bt:join-thread (find-if (lambda (th)
                                            (search "hunchentoot" (bt:thread-name th)))
                                          (bt:all-threads)))
     ;; catch a user's c-c
     (#+sbcl sb-sys:interactive-interrupt
      #+ccl  ccl:interrupt-signal-condition
      #+clisp system::simple-interrupt-condition
      #+ecl ext:interactive-interrupt
      #+allegro excl:interrupt-signal
      () (progn
           (format *error-output* "aborting.~&")
           (stop-server)
           (uiop:quit)))
     (error (c) (format t "woops, an unknown error occured:~&~a~&" c))))
 #+end_src
** TODO Testing [0/1]
   - [ ] Unit tests
   - [ ] mailgun-client tests
   - [ ] End to end integration testing (phantom.js?)
** TODO Error and other HTTP Status pages
   - [ ] 404
   - [ ] 50x
   - [ ] 40x
   - [ ] maintenance pages? This might require higher level nginx stuff
** TODO Create Web project template Library
** TODO Performance Profiling
** TODO CI Server (Gitlab)
** TODO index.txt and robots.txt and sitemaps
   - [X] robots.txt
   - [ ] html <meta> robots directive
   - [ ] http response headers x-robots-tag
** TODO Handler logging file size growth
   - [X] use correct directory for storage
   - [ ] cleanup cronjob?
   - [ ] configure in an automated way
** TODO Server Daemon
   *Do we even need this? What is the benefit?*
#+BEGIN_SRC common-lisp
;; NOTE: maybe use this for deployment of webserver

(require 'sb-daemon)
(require 'swank)
(require 'mysite)

(progn
  (defparameter *running* nil)
  (defun launch-app (argv)
    (declare (ignore argv))
    (sb-daemon:daemonize :output "/tmp/mysite.output"
                         :error "/tmp/mysite.error"
                         :pidfile "/tmp/mysite.pid"
                         :exit-parent t
                         :sigterm (lambda (sig)
                                    (declare (ignore sig))
                                    (setf *running* nil)))
    (swank:create-server :port 4006 :dont-close t)
    (setf *running* t)
    (mysite:start-app)
    (loop while *running* do (sleep 10))
    (mysite:stop-app)
    (sb-ext:exit))
  (launch-app nil))
#+END_SRC
** TODO Improve handling of application secrets
   *Avoid creating a development environment nightmare*
   - [[https://docs.docker.com/engine/swarm/secrets/][Docker Secrets]]
   - [[https://kubernetes.io/docs/concepts/configuration/secret/][Kubernetes Secrets]]
   - [[https://www.vaultproject.io/][Vault]]
** TODO log4cl
   *Is this necessary?* Perhaps only for learning purposes...
   Probably an improvement over hunchentoot's mutex stuff
#+src 
;; NOTE eventually upgrade to log4cl from hunchentoot's default logging functionality
(defun log4cl-setup ()
  (when (string= "PROD" (get-config "PROFILE"))
    (log4cl:remove-all-appenders log4cl:*root-logger*)
    ;; TODO standardized logging file location? /var/log/lisp-application.log
    (log:config :daily "~/lisp-application.log" :backup t)
    (setf (log4cl:logger-log-level log4cl:*root-logger*) log4cl:+log-level-info+))
  (when (string= "DEV" (get-config "PROFILE"))
    ;; TODO figure out how to setup a default log4cl instance...
    nil))
    #+end_src
** TODO Add d3 skill chart
** TODO Database for images
** TODO Travel Section
** TODO Certificates
*** [[https://itnext.io/using-letsencrypt-ssl-certificates-in-aws-certificate-manager-c2bc3c6ae10][Lets Encrypt & AWS]]
*** [[https://medium.com/@pentacent/nginx-and-lets-encrypt-with-docker-in-less-than-5-minutes-b4b8a60d3a71][Nginx & Docker]]
* [#A] Priority 
** dynamically load webfonts? and boostrap?
** restart on death
** randomized message of the day
** dev environement
*** docker
*** docker-compose
*** nginx
*** certs
** more nginx config
*** nginx certbot plugin
*** dev config
*** rate limits
*** alert emails
** character count mobile
*** and on paste
** github release versions? dockerhub release versions?
** spinner on submit message
** minor config from [[https://gitlab.onnix.io/root/pr0nage/blob/9fa3f5d837cdd00f65e9d2c944b11b7de7e42440/init.lisp][Some Gitlab Repo]]
*** (setf (html-mode) :html5)?
*** *html-no-indent-tags
*** print-object / print-unreadable-obect
** Loading Spinner
*** contact submit
*** entire site?
** TODO email handler tests
** TODO docker dev
** TODO docker test
** force running docker test prior to deploy?
*** construct a prod build from the test code? 
**** might just have to strip out test code
** solidify endpoints, only allow minimum number of request-methods

