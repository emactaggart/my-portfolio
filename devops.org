* Devops  
  Special thanks to [[https://github.com/wrightmikea/simple-docker-tangle][wrightmikea]]!
  This file is an attempt at *Literate Devops*
** Docker setup                                            :dev:docker:setup:
*** Setup env variables
#+name: setup
#+BEGIN_SRC sh :results output verbatim :session docker
eval "$(docker-machine env default)"
#+END_SRC

#+RESULTS: setup
: Docker machine "default" does not exist. Use "docker-machine ls" to list machines. Use "docker-machine create" to add a new one.

*** Verify Docker works                                    :dev:docker:setup:
#+name: verify-docker
#+BEGIN_SRC sh :results output verbatim replace :session docker
echo "show docker env"
env | grep DOC
docker run --name my-container hello-world
echo "\n"
docker container rm my-container
echo "\n"
#+END_SRC

#+RESULTS: verify-docker
#+begin_example
show docker env
sh-5.0$ 
Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/
\n
my-container
\n
#+end_example

** Server Setup
   :properties:
   :header-args: :var app_name="evan-webapp" username="ec2-user"
   :end:
*** Send Configurations To Server
#+begin_src sh
scp ~/.prodrc ec2-user@evan-webapp:~/.devrc
#+end_src

*** Logging Directory Setup
    :properties:
    :header-args+: :dir /ssh:ec2-user@evan-webapp|sudo:evan-webapp:/var/log
    :end:

 #+begin_src sh :results output drawer
   mkdir $dir
   touch $dir/access.log
   touch $dir/message.log
   chown -R $username:$username $dir
   chmod 755 $dir
   whoami
   pwd
   ls -al $dir
 #+end_src

 #+RESULTS:
 :results:
 root
 /var/log
 total 672
 drwxr-xr-x  7 root     root       4096 Aug 21 02:23 .
 drwxr-xr-x 19 root     root       4096 Jun 11 00:40 ..
 drwxr-xr-x  3 root     root       4096 Aug 21 00:46 amazon
 drwx------  2 root     root       4096 Aug 21 00:46 audit
 -rw-------  1 root     root          0 Aug 21 00:46 boot.log
 -rw-------  1 root     utmp       3456 Aug 22 01:43 btmp
 -rw-r--r--  1 root     root      77008 Aug 21 00:46 cloud-init.log
 -rw-r--r--  1 root     root      14991 Aug 21 00:46 cloud-init-output.log
 -rw-------  1 root     root      12045 Aug 22 05:01 cron
 -rw-r--r--  1 root     root      23774 Aug 21 00:46 dmesg
 -rw-r--r--  1 root     root      13433 Aug 21 03:07 docker
 -rw-r--r--  1 root     root     215124 Aug 21 01:00 dracut.log
 drwxr-xr-x  2 ec2-user ec2-user   4096 Aug 21 02:24 evan-webapp
 -rw-r--r--  1 root     root     146292 Aug 22 05:07 lastlog
 drwxr-xr-x  2 root     root       4096 Jun 11 00:40 mail
 -rw-------  1 root     root        195 Aug 21 00:46 maillog
 -rw-------  1 root     root     163203 Aug 22 05:21 messages
 drwxr-xr-x  2 ntp      ntp        4096 May  3 15:36 ntpstats
 -rw-------  1 root     root      37534 Aug 22 05:07 secure
 -rw-------  1 root     root          0 Jun 11 00:40 spooler
 -rw-------  1 root     root          0 Jun 11 00:39 tallylog
 -rw-rw-r--  1 root     utmp      45696 Aug 22 05:07 wtmp
 -rw-------  1 root     root       2147 Aug 21 01:04 yum.log
 :end:

** Dockerfile Creation and deployment
   :properties:
   :header-args: :var app_name="evan-webapp"
   :end:

*** Generate a Dockerfile for the project
#+name: generate-dockerfile
#+BEGIN_SRC dockerfile :tangle Dockerfile
  FROM daewok/sbcl:alpine

  # COPY ./ /usr/src/app/

  ## TODO Securer install of quicklisp (needs to be updated for alpine (no apt-get))
  # RUN set -x \
  #   && apt-get update && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt \
  #   && curl "https://beta.quicklisp.org/release-key.txt" > /tmp/quicklisp-release-key.txt \
  #   && curl "https://beta.quicklisp.org/quicklisp.lisp" > /tmp/quicklisp.lisp \
  #   && curl "https://beta.quicklisp.org/quicklisp.lisp.asc" > /tmp/quicklisp.lisp.asc \
  #   && export GNUPGHOME="$(mktemp -d)" \
  #   && gpg --batch --import /tmp/quicklisp-release-key.txt \
  #   && gpg --batch --verify /tmp/quicklisp.lisp.asc /tmp/quicklisp.lisp \
  #   && sync \
  #   && sleep 2 \
  #   && rm -rf "$GNUPGHOME" /tmp/quicklisp.lisp.asc \
  #   && export HOME=/home/lisp \
  #   && sbcl --no-sysinit --no-userinit --non-interactive \
  #   --load /tmp/quicklisp.lisp \
  #   --eval "(quicklisp-quickstart:install)" \
  #   --eval "(ql::without-prompting (dolist (imp '(:sbcl :ccl :abcl :ecl)) (ql:add-to-init-file imp)))" \
  #   && rm -rf /tmp/*

  # FIXME remove this for production (but make available in development?)
  # RUN apk add --no-cache bash

  # FIXME improve security and fingerprinting for quicklisp install...
  RUN cd /tmp && \
    wget https://beta.quicklisp.org/quicklisp.lisp && \
    sbcl --load quicklisp.lisp --quit --eval '(quicklisp-quickstart:install)'

  COPY sbclrc /root/.sbclrc
  COPY ./ /root/prod/
  RUN ln -s /root/prod/prod.asd /root/quicklisp/local-projects/

  EXPOSE 8080

  WORKDIR /root

  ENTRYPOINT ["sbcl", "--eval", "(ql:quickload 'prod)", "--eval", "(control:start-server)"]

#+END_SRC

*** Docker Build
#+name: build-image
#+BEGIN_SRC sh :results output drawer
   echo "---- Building Docker File -----"
   docker build -t $app_name ./
#+END_SRC

#+RESULTS: build-image
:results:
---- Building Docker File -----
Sending build context to Docker daemon  45.04MB
Step 1/8 : FROM daewok/sbcl:alpine
 ---> 1a8415706b0e
Step 2/8 : RUN cd /tmp &&   wget https://beta.quicklisp.org/quicklisp.lisp &&   sbcl --load quicklisp.lisp --quit --eval '(quicklisp-quickstart:install)'
 ---> Using cache
 ---> 92776b95f0b0
Step 3/8 : COPY sbclrc /root/.sbclrc
 ---> Using cache
 ---> db6a9b481bc1
Step 4/8 : COPY ./ /root/prod/
 ---> Using cache
 ---> a454d3c45801
Step 5/8 : RUN ln -s /root/prod/prod.asd /root/quicklisp/local-projects/
 ---> Using cache
 ---> ee1af4d22ec4
Step 6/8 : EXPOSE 8080
 ---> Using cache
 ---> 3d099265ff5e
Step 7/8 : WORKDIR /root
 ---> Using cache
 ---> 2988d6925778
Step 8/8 : ENTRYPOINT ["sbcl", "--eval", "(ql:quickload 'prod)", "--eval", "(control:start-server)"]
 ---> Using cache
 ---> 7ce4c502c8f1
Successfully built 7ce4c502c8f1
Successfully tagged evan-webapp:latest
:end:

*** Transport Docker Image to Server 
    :properties:
    # :header-args+: :dir ~/Downloads/prod
    # :header-args+: :var destination="ec2-user@evan-webapp:~"
    # :header-args+: :var destination="~/Downloads/prod"
    :end:

#+name: save-image-and-send-to-server
#+begin_src sh
  docker save -o $app_name.image $app_name
  tar czf $app_name.tar.gz $app_name.image
  rm $app_name.image
  scp $app_name.tar.gz ec2-user@evan-webapp:~
  rm $app_name.tar.gz
  pwd
#+end_src

#+RESULTS: save-image-and-send-to-server
: /home/evan/Downloads/prod

#+RESULTS:

*** Deploy to server
    :properties:
    :header-args+: :dir /ssh:ec2-user@evan-webapp:~
    :end:

#+name: load-and-run-image
#+begin_src sh
  tar -xf $app_name.tar.gz
  docker load -i $app_name.image
  rm $app_name.tar.gz
  rm $app_name.image

  echo "----- Running Docker Container -----"
  docker stop $app_name
  docker container rm $app_name
  docker run -dt --rm=true \
         -p 8080:8080 \
         --name $app_name \
         -v ~/.prodrc:/root/.devrc:ro \
         -v /var/log/$app_name:/var/log/$app_name \
         $app_name 

#+end_src

#+RESULTS: load-and-run-image
| [1A[1K[Kd7ec5f782f63:                                    | Loading | layer              | 458.8kB/45.04MB[1B[1A[1K[Kd7ec5f782f63: | Loading | layer | 14.68MB/45.04MB[1B[1A[1K[Kd7ec5f782f63: | Loading | layer              | 29.36MB/45.04MB[1B[1A[1K[Kd7ec5f782f63: | Loading | layer    | 40.37MB/45.04MB[1B[1A[1K[Kd7ec5f782f63: | Loading | layer | 41.29MB/45.04MB[1B[1A[1K[Kd7ec5f782f63: | Loading | layer                                                                   | 42.21MB/45.04MB[1B[1A[1K[Kd7ec5f782f63: | Loading | layer  | 45.04MB/45.04MB[1B |
| [1A[1K[Kc3a6c14f8eb7:                                    | Loading | layer              | 3.072kB/3.072kB[1B[1A[1K[Kc3a6c14f8eb7: | Loading | layer | 3.072kB/3.072kB[1BThe                           | image   | evan-webapp:latest | already                                             | exists, | renaming | the                                                 | old     | one   | with                                                | ID      | sha256:34ead26e33a43f383053f0f44a9e5cea6d2b518d4bc9cd5fd28eb914b1f334bd | to                                                  | empty   | string |                        |
| Loaded                                                           | image:  | evan-webapp:latest |                                                     |         |       |                                                     |         |                    |                                                     |         |          |                                                     |         |       |                                                     |         |                                                                         |                                                     |         |        |                        |
| -----                                                            | Running | Docker             | Container                                           | -----   |       |                                                     |         |                    |                                                     |         |          |                                                     |         |       |                                                     |         |                                                                         |                                                     |         |        |                        |
| evan-webapp                                                      |         |                    |                                                     |         |       |                                                     |         |                    |                                                     |         |          |                                                     |         |       |                                                     |         |                                                                         |                                                     |         |        |                        |
| 1bbf6fe643bd7d8bcdf2c9df7844dfb20946777c6bfeaf3f5efff3f929bf0e8b |         |                    |                                                     |         |       |                                                     |         |                    |                                                     |         |          |                                                     |         |       |                                                     |         |                                                                         |                                                     |         |        |                        |

#+RESULTS:
| [1A[1K[K5f5a836898c0: | Loading | layer              | 458.8kB/44.49MB[1B[1A[1K[K5f5a836898c0: | Loading | layer | 16.06MB/44.49MB[1B[1A[1K[K5f5a836898c0: | Loading | layer              | 30.74MB/44.49MB[1B[1A[1K[K5f5a836898c0: | Loading | layer    | 39.91MB/44.49MB[1B[1A[1K[K5f5a836898c0: | Loading | layer | 40.83MB/44.49MB[1B[1A[1K[K5f5a836898c0: | Loading | layer                                                                   | 41.75MB/44.49MB[1B[1A[1K[K5f5a836898c0: | Loading | layer  | 44.49MB/44.49MB[1B[1A[1K[K5f5a836898c0: | Loading | layer | 44.49MB/44.49MB[1B |
| [1A[1K[K78e10fd83041: | Loading | layer              | 3.072kB/3.072kB[1B[1A[1K[K78e10fd83041: | Loading | layer | 3.072kB/3.072kB[1BThe                           | image   | evan-webapp:latest | already                                             | exists, | renaming | the                                                 | old     | one   | with                                                | ID      | sha256:b92f610fed5ff8471d338966357fffde5fd48885697d335d2f8fbe8a682c3a53 | to                                                  | empty   | string |                                                     |         |       |                        |
| Loaded                        | image:  | evan-webapp:latest |                                                     |         |       |                                                     |         |                    |                                                     |         |          |                                                     |         |       |                                                     |         |                                                                         |                                                     |         |        |                                                     |         |       |                        |

*** Build and Run Local
#+name: build-and-run-local
#+BEGIN_SRC sh :results output drawer
  echo "---- Building Docker File -----"
  docker build -t $app_name ./
  echo "----- Running Docker Container -----"
  docker stop $app_name
  docker container rm $app_name
  docker run -dt --rm=true \
         -p 8080:8080 \
         --name $app_name \
         -v ~/.prodrc:/root/.devrc:ro \
         -v /var/log/$app_name:/var/log/$app_name \
         $app_name 

#+end_src

#+RESULTS: build-and-run-local
:results:
---- Building Docker File -----
Sending build context to Docker daemon  45.04MB
Step 1/8 : FROM daewok/sbcl:alpine
 ---> 1a8415706b0e
Step 2/8 : RUN cd /tmp &&   wget https://beta.quicklisp.org/quicklisp.lisp &&   sbcl --load quicklisp.lisp --quit --eval '(quicklisp-quickstart:install)'
 ---> Using cache
 ---> 92776b95f0b0
Step 3/8 : COPY sbclrc /root/.sbclrc
 ---> Using cache
 ---> db6a9b481bc1
Step 4/8 : COPY ./ /root/prod/
 ---> Using cache
 ---> a454d3c45801
Step 5/8 : RUN ln -s /root/prod/prod.asd /root/quicklisp/local-projects/
 ---> Using cache
 ---> ee1af4d22ec4
Step 6/8 : EXPOSE 8080
 ---> Using cache
 ---> 3d099265ff5e
Step 7/8 : WORKDIR /root
 ---> Using cache
 ---> 2988d6925778
Step 8/8 : ENTRYPOINT ["sbcl", "--eval", "(ql:quickload 'prod)", "--eval", "(control:start-server)"]
 ---> Using cache
 ---> 7ce4c502c8f1
Successfully built 7ce4c502c8f1
Successfully tagged evan-webapp:latest
----- Running Docker Container -----
evan-webapp
ec0ed95961c10460e30b1306bc2f7dd49bbc2a0e6afe7f411d7cd53d8912fb0b
:end:

** Future Improvemens [0/3]
*** TODO [#A] How do we want to execute main 
**** Start in bash
**** Start with sbcl -eval
**** Create an executable
*** TODO Cache the quicklisp dependencies 
    It would be possilble to link a volume for the dev environment?
    For production we should probably just install everything fresh? Load time is pretty bad though...
*** TODO Monitor for time drift 
    This appears to be a macos problem only.

