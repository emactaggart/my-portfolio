* Devops  
  :properties:
  :header-args: :results none
  :end:

  Special thanks to [[https://github.com/wrightmikea/simple-docker-tangle][wrightmikea]]!
  This file is an attempt at *Literate Devops*
** Setup
   :properties:
   :header-args+: :var app_name="my-portfolio" username="ec2-user"
   :end:

*** Logging Directory Setup
    :properties:
    :header-args+: :dir /ssh:tagg|sudo:tagg:/var/log
    :end:

 #+begin_src sh :results none
   mkdir $app_name
   touch $app_name/access.log
   touch $app_name/message.log
   chown -R $username:$username $app_name
   chmod 755 $app_name
   whoami
   pwd
   ls -al $app_name
 #+end_src

**** Local Setup
    :properties:
    :header-args+: :dir /sudo::/var/log
    :end:

 #+begin_src sh
   mkdir $app_name
   touch $app_name/access.log
   touch $app_name/message.log
   chown -R $(whoami):$(whoami) $app_name
   chmod 755 $app_name
   whoami
   pwd
   ls -al $app_name
 #+end_src

*** TODO Docker setup
*** TODO Docker Compose Setup
** Project Configuration
*** .taggrc

#+name: example-taggrc
#+begin_src txt
PROFILE=DEV
MAILGUN_API_KEY=YOUR-MAILGUN-KEY
APPLICATION_ROOT=~/Downloads/my-portfolio
APPLICATION_NAME=my-portfolio
#+end_src

*** Dockerfile
 #+name: generate-dockerfile
 #+BEGIN_SRC dockerfile :tangle Dockerfile
   FROM daewok/sbcl:alpine

   # COPY ./ /usr/src/app/

   ## TODO Securer install of quicklisp (needs to be updated for alpine (no apt-get))
   # RUN set -x \
   #   && apt-get update && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt \
   #   && curl "https://beta.quicklisp.org/release-key.txt" > /tmp/quicklisp-release-key.txt \
   #   && curl "https://beta.quicklisp.org/quicklisp.lisp" > /tmp/quicklisp.lisp \
   #   && curl "https://beta.quicklisp.org/quicklisp.lisp.asc" > /tmp/quicklisp.lisp.asc \
   #   && export GNUPGHOME="$(mktemp -d)" \
   #   && gpg --batch --import /tmp/quicklisp-release-key.txt \
   #   && gpg --batch --verify /tmp/quicklisp.lisp.asc /tmp/quicklisp.lisp \
   #   && sync \
   #   && sleep 2 \
   #   && rm -rf "$GNUPGHOME" /tmp/quicklisp.lisp.asc \
   #   && export HOME=/home/lisp \
   #   && sbcl --no-sysinit --no-userinit --non-interactive \
   #   --load /tmp/quicklisp.lisp \
   #   --eval "(quicklisp-quickstart:install)" \
   #   --eval "(ql::without-prompting (dolist (imp '(:sbcl :ccl :abcl :ecl)) (ql:add-to-init-file imp)))" \
   #   && rm -rf /tmp/*

   # FIXME remove this for production (but make available in development?)
   # RUN apk add --no-cache bash

   # FIXME improve security and fingerprinting for quicklisp install...
   RUN cd /tmp && \
     wget https://beta.quicklisp.org/quicklisp.lisp && \
     sbcl --load quicklisp.lisp --quit --eval '(quicklisp-quickstart:install)'

   COPY sbclrc /root/.sbclrc
   COPY ./ /root/my-portfolio/
   RUN ln -s /root/my-portfolio/my-portfolio.asd /root/quicklisp/local-projects/

   EXPOSE 8080

   WORKDIR /root

   ENTRYPOINT ["sbcl", "--eval", "(ql:quickload 'my-portfolio)", "--eval", "(control:start-server)"]

 #+END_SRC

*** docker-compose.yml

 #+name: docker-compose
  #+begin_src yaml :tangle docker-compose.yml
   version: '3'
   services:
     nginx:
       image: nginx:alpine
       container_name: nginx
       volumes:
         - ./nginx.conf:/etc/nginx/nginx.conf
       ports:
         - 80:80
     portfolio:
       image: emactaggart/my-portfolio
       container_name: my-portfolio
       ports:
         - 8080:8080
       volumes:
         - ~/.prod-taggrc:/root/.taggrc:ro
         - /var/log/my-portfolio:/var/log/my-portfolio
       # stdin_open: true
       tty: true

  #+end_src

 #+name: docker-compose-prod
 #+begin_src yaml :tangle docker-compose.prod.yml

 #+end_src

*** nginx.conf

 #+name: nginx-configuration
 #+begin_src nginx :tangle nginx.conf
 events {

 }

 http {
     server {
         listen 80;
         server_name mactagg.art;

         location / {
             proxy_pass http://my-portfolio:8080;
         }
     }
 }
 #+end_src

*** TODO Letsencrypt

** Deployment
*** Send Configurations To Server

#+name: send-configurations-to-server
#+begin_src sh :results none
  scp ~/.prod-taggrc tagg:~/.taggrc
  scp $(pwd)/docker-compose.yml tagg:~/
  scp $(pwd)/nginx.conf tagg:~/
#+end_src

*** Deploy to server
    :properties:
    :header-args+: :dir /ssh:tagg:~
    :end:

#+name: deploy-webapp
#+begin_src sh
docker-compose up -d my-portfolio
#+end_src

#+name: deploy-all
#+begin_src sh
docker-compose up -d
#+end_src

#+name: fresh-deploy-all
#+begin_src sh
docker-compose up -d --force-recreate
#+end_src
 
** Local Deployment
   :properties:
   :header-args+: :var app_name="my-portfolio" repo="emactaggart"
   :end:
*** Run Local
# TODO create local docker-compose.yml to run local builds instead of having to push
#+name docker-compose-local
#+begin_src sh
docker-compose up -d --force-recreate
#+end_src

*** Docker push

#+name: build-image
#+BEGIN_SRC sh
   echo "---- Building Docker File -----"
   docker build -t $repo/$app_name:latest ./
   docker push $repo/$app_name:latest 
#+END_SRC

** Future Improvemens [0/3]
*** TODO [#A] How do we want to execute main 
**** Start in bash
**** Start with sbcl -eval
**** Create an executable
*** TODO Cache the quicklisp dependencies 
    It would be possilble to link a volume for the dev environment?
    For production we should probably just install everything fresh? Load time is pretty bad though...
