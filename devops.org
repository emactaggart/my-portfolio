* Devops  
  Special thanks to [[https://github.com/wrightmikea/simple-docker-tangle][wrightmikea]]!
** Overview
   Trying out some literate devops
** Docker setup                                            :dev:docker:setup:
*** Setup env variables
#+name: setup
#+BEGIN_SRC sh :results output verbatim :session docker
eval "$(docker-machine env default)"
#+END_SRC

#+RESULTS: setup
: Docker machine "default" does not exist. Use "docker-machine ls" to list machines. Use "docker-machine create" to add a new one.

*** Verify Docker works                                    :dev:docker:setup:
#+name: verify-docker
#+BEGIN_SRC sh :results output verbatim replace :session docker
echo "show docker env"
env | grep DOC
docker run --name my-container hello-world
echo "\n"
docker container rm my-container
echo "\n"
#+END_SRC

#+RESULTS: verify-docker
#+begin_example
show docker env
sh-5.0$ 
Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/
\n
my-container
\n
#+end_example

** Dockerfile Creation and deployment

*** Configure Logging Directory
#+name: configure-logging-directory
#+begin_src sh :dir "/sudo::/var/log" :results output verbatim drawer replace :var dir="evan-webapp" username=(user-login-name)
  mkdir $dir
  touch $dir/access.log
  touch $dir/message.log
  chown -R $username:$username $dir
  chmod 755 $dir
  pwd
  ls -al $dir
#+end_src

#+RESULTS: configure-logging-directory
:RESULTS:
/var/log
total 12
drwxr-xr-x.  2 evan evan 4096 Aug 20 15:23 .
drwxr-xr-x. 20 root root 4096 Aug 20 14:02 ..
-rw-r--r--.  1 evan evan 1139 Aug 20 15:28 access.log
-rw-r--r--.  1 evan evan    0 Aug 20 15:28 message.log
:END:

*** Generate a Dockerfile for the project
#+name: generate-dockerfile
#+BEGIN_SRC dockerfile :padline no :tangle Dockerfile
  FROM daewok/sbcl:alpine

  # COPY ./ /usr/src/app/

  ## TODO Securer install of quicklisp (needs to be updated for alpine (no apt-get))
  # RUN set -x \
  #   && apt-get update && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt \
  #   && curl "https://beta.quicklisp.org/release-key.txt" > /tmp/quicklisp-release-key.txt \
  #   && curl "https://beta.quicklisp.org/quicklisp.lisp" > /tmp/quicklisp.lisp \
  #   && curl "https://beta.quicklisp.org/quicklisp.lisp.asc" > /tmp/quicklisp.lisp.asc \
  #   && export GNUPGHOME="$(mktemp -d)" \
  #   && gpg --batch --import /tmp/quicklisp-release-key.txt \
  #   && gpg --batch --verify /tmp/quicklisp.lisp.asc /tmp/quicklisp.lisp \
  #   && sync \
  #   && sleep 2 \
  #   && rm -rf "$GNUPGHOME" /tmp/quicklisp.lisp.asc \
  #   && export HOME=/home/lisp \
  #   && sbcl --no-sysinit --no-userinit --non-interactive \
  #   --load /tmp/quicklisp.lisp \
  #   --eval "(quicklisp-quickstart:install)" \
  #   --eval "(ql::without-prompting (dolist (imp '(:sbcl :ccl :abcl :ecl)) (ql:add-to-init-file imp)))" \
  #   && rm -rf /tmp/*

  # FIXME remove this for production (but make available in development?)
  RUN apk add --no-cache bash

  # FIXME improve security and fingerprinting for quicklisp install...
  RUN cd /tmp && \
    wget https://beta.quicklisp.org/quicklisp.lisp && \
    sbcl --load quicklisp.lisp --quit --eval '(quicklisp-quickstart:install)'

  COPY sbclrc /root/.sbclrc
  COPY ./ /root/prod/
  RUN ln -s /root/prod/prod.asd /root/quicklisp/local-projects/

  EXPOSE 8080

  WORKDIR /root

  ENTRYPOINT ["/bin/bash"]
  # CMD ["/bin/bash"]
  # CMD ["sbcl", "--eval", "(ql:quickload 'prod)", "--eval", "(control:start-server)"]

#+END_SRC

*** Docker Build
#+name: build-image
#+BEGIN_SRC sh :results none :session docker
   echo "---- Building Docker File -----"
   docker build -t evan-webapp ./
#+END_SRC

*** Docker Run
 #+name: run-image
 #+BEGIN_SRC sh :results none :session docker :var application_name="evan-webapp"
   # TODO run as -d detached after finished testing
   ## Various other flags that might be useful during development
   # -d
   # -e "TZ=America/Regina" \ # it would appear that time zone is unecessary for logging

   echo "----- Running Docker Container -----"
   docker run -it -p 8080:8080 \
          -v ~/.prodrc:/root/.devrc:ro \
          -v /var/log/$application_name:/var/log/$application_name \
          $application_name

 #+END_SRC



*** Exit shells
#+begin_src sh :session docker
  (quit)
  exit
  # TODO ideally cleanup the newly created container, for now just use docker.el *shrug*
  exit
#+end_src

*** Future Improvemens [0/3]
**** TODO Cache the quicklisp dependencies 
     It would be possilble to link a volume for the dev environment?
     For production we should probably just install everything fresh? Load time is pretty bad though...
**** TODO How do we want to execute main
***** Start in bash
***** Start with sbcl -eval
***** Create an executable
**** TODO Monitor for time drift 
     This appears to be a macos problem only.

