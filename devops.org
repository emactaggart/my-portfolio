* Devops  
  Special thanks to [[https://github.com/wrightmikea/simple-docker-tangle][wrightmikea]]!
** Overview
   Trying out some literate devops
** Docker setup                                            :dev:docker:setup:
*** Setup env variables
#+name: setup
#+BEGIN_SRC sh :results output verbatim :session docker
eval "$(docker-machine env default)"
#+END_SRC

#+RESULTS: setup
: Docker machine "default" does not exist. Use "docker-machine ls" to list machines. Use "docker-machine create" to add a new one.

*** Verify Docker works                                    :dev:docker:setup:
#+name: verify-docker
#+BEGIN_SRC sh :results output verbatim replace :session docker
echo "show docker env"
env | grep DOC
docker run --name my-container hello-world
echo "\n"
docker container rm my-container
echo "\n"
#+END_SRC

#+RESULTS: verify-docker
#+begin_example
show docker env
sh-5.0$ 
Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/
\n
my-container
\n
#+end_example
** Logging Directory Setup
   :properties:
   :header-args: :var app_name="evan-webapp" username="ec2-user"
   :header-args+: :dir /ssh:ec2-user@evan-webapp|sudo:evan-webapp:/var/log
   :end:

#+begin_src sh :results output drawer
  mkdir $dir
  touch $dir/access.log
  touch $dir/message.log
  chown -R $username:$username $dir
  chmod 755 $dir
  whoami
  pwd
  ls -al $dir
#+end_src

#+RESULTS:
:results:
root
/var/log
total 672
drwxr-xr-x  7 root     root       4096 Aug 21 02:23 .
drwxr-xr-x 19 root     root       4096 Jun 11 00:40 ..
drwxr-xr-x  3 root     root       4096 Aug 21 00:46 amazon
drwx------  2 root     root       4096 Aug 21 00:46 audit
-rw-------  1 root     root          0 Aug 21 00:46 boot.log
-rw-------  1 root     utmp       3456 Aug 22 01:43 btmp
-rw-r--r--  1 root     root      77008 Aug 21 00:46 cloud-init.log
-rw-r--r--  1 root     root      14991 Aug 21 00:46 cloud-init-output.log
-rw-------  1 root     root      12045 Aug 22 05:01 cron
-rw-r--r--  1 root     root      23774 Aug 21 00:46 dmesg
-rw-r--r--  1 root     root      13433 Aug 21 03:07 docker
-rw-r--r--  1 root     root     215124 Aug 21 01:00 dracut.log
drwxr-xr-x  2 ec2-user ec2-user   4096 Aug 21 02:24 evan-webapp
-rw-r--r--  1 root     root     146292 Aug 22 05:07 lastlog
drwxr-xr-x  2 root     root       4096 Jun 11 00:40 mail
-rw-------  1 root     root        195 Aug 21 00:46 maillog
-rw-------  1 root     root     163203 Aug 22 05:21 messages
drwxr-xr-x  2 ntp      ntp        4096 May  3 15:36 ntpstats
-rw-------  1 root     root      37534 Aug 22 05:07 secure
-rw-------  1 root     root          0 Jun 11 00:40 spooler
-rw-------  1 root     root          0 Jun 11 00:39 tallylog
-rw-rw-r--  1 root     utmp      45696 Aug 22 05:07 wtmp
-rw-------  1 root     root       2147 Aug 21 01:04 yum.log
:end:

** Dockerfile Creation and deployment
   :properties:
   :header-args:
   :end:

*** Generate a Dockerfile for the project
#+name: generate-dockerfile
#+BEGIN_SRC dockerfile :tangle Dockerfile
  FROM daewok/sbcl:alpine

  # COPY ./ /usr/src/app/

  ## TODO Securer install of quicklisp (needs to be updated for alpine (no apt-get))
  # RUN set -x \
  #   && apt-get update && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt \
  #   && curl "https://beta.quicklisp.org/release-key.txt" > /tmp/quicklisp-release-key.txt \
  #   && curl "https://beta.quicklisp.org/quicklisp.lisp" > /tmp/quicklisp.lisp \
  #   && curl "https://beta.quicklisp.org/quicklisp.lisp.asc" > /tmp/quicklisp.lisp.asc \
  #   && export GNUPGHOME="$(mktemp -d)" \
  #   && gpg --batch --import /tmp/quicklisp-release-key.txt \
  #   && gpg --batch --verify /tmp/quicklisp.lisp.asc /tmp/quicklisp.lisp \
  #   && sync \
  #   && sleep 2 \
  #   && rm -rf "$GNUPGHOME" /tmp/quicklisp.lisp.asc \
  #   && export HOME=/home/lisp \
  #   && sbcl --no-sysinit --no-userinit --non-interactive \
  #   --load /tmp/quicklisp.lisp \
  #   --eval "(quicklisp-quickstart:install)" \
  #   --eval "(ql::without-prompting (dolist (imp '(:sbcl :ccl :abcl :ecl)) (ql:add-to-init-file imp)))" \
  #   && rm -rf /tmp/*

  # FIXME remove this for production (but make available in development?)
  # RUN apk add --no-cache bash

  # FIXME improve security and fingerprinting for quicklisp install...
  RUN cd /tmp && \
    wget https://beta.quicklisp.org/quicklisp.lisp && \
    sbcl --load quicklisp.lisp --quit --eval '(quicklisp-quickstart:install)'

  COPY sbclrc /root/.sbclrc
  COPY ./ /root/prod/
  RUN ln -s /root/prod/prod.asd /root/quicklisp/local-projects/

  EXPOSE 8080

  WORKDIR /root

  ENTRYPOINT ["sbcl", "--eval", "(ql:quickload 'prod)", "--eval", "(control:start-server)"]

#+END_SRC

*** Docker Build
#+name: build-image
#+BEGIN_SRC sh :results output drawer
   echo "---- Building Docker File -----"
   docker build -t evan-webapp ./
#+END_SRC

#+RESULTS: build-image
:results:
---- Building Docker File -----
Sending build context to Docker daemon  98.76MB
Step 1/8 : FROM daewok/sbcl:alpine
 ---> 1a8415706b0e
Step 2/8 : RUN cd /tmp &&   wget https://beta.quicklisp.org/quicklisp.lisp &&   sbcl --load quicklisp.lisp --quit --eval '(quicklisp-quickstart:install)'
 ---> Using cache
 ---> 92776b95f0b0
Step 3/8 : COPY sbclrc /root/.sbclrc
 ---> Using cache
 ---> db6a9b481bc1
Step 4/8 : COPY ./ /root/prod/
 ---> eeb4cf7811a4
Step 5/8 : RUN ln -s /root/prod/prod.asd /root/quicklisp/local-projects/
 ---> Running in f73a902ac80c
Removing intermediate container f73a902ac80c
 ---> 786675ad174a
Step 6/8 : EXPOSE 8080
 ---> Running in 3b42c02cb993
Removing intermediate container 3b42c02cb993
 ---> fb3232bbec59
Step 7/8 : WORKDIR /root
 ---> Running in 5659a4e88eb0
Removing intermediate container 5659a4e88eb0
 ---> f50e245d8ef0
Step 8/8 : ENTRYPOINT ["sbcl", "--eval", "(ql:quickload 'prod)", "--eval", "(control:start-server)"]
 ---> Running in 082daeb0d2e0
Removing intermediate container 082daeb0d2e0
 ---> ce4626f21e70
Successfully built ce4626f21e70
Successfully tagged evan-webapp:latest
:end:

*** Docker Transporting without Repo
    Instead of git cloning? Kinda mimicks a build server in a sense... maybe not.
    [[https://stackoverflow.com/questions/23935141/how-to-copy-docker-images-from-one-host-to-another-without-using-a-repository][stackoverflow link]]
****  Images
#+begin_src sh 
docker save -o <path for generated tar file> <image name>
docker load -i <path to image tar file>
docker save -o c:/myfile.tar centos:16
#+end_src
**** Containers
     I don't think I like this 
     Someone mentioned: This is more for backup purposes
#+begin_src sh
docker export CONTAINER_ID > my_container.tar
cat my_container.tar | docker import -
#+end_src

*** Docker Run
 #+name: run-image
 #+BEGIN_SRC sh :session docker :var application_name="evan-webapp" :dir /ssh:ec2-user@evan-webapp:~/
   echo "----- Running Docker Container -----"
   docker run -it -p 8080:8080 \
          -v ~/.prodrc:/root/.devrc:ro \
          -v /var/log/$application_name:/var/log/$application_name \
          $application_name 
 #+END_SRC

 #+RESULTS: run-image
 :results:
 :end:

*** Future Improvemens [0/3]
**** TODO [#A] How do we want to execute main 
***** Start in bash
***** Start with sbcl -eval
***** Create an executable
**** TODO Cache the quicklisp dependencies 
     It would be possilble to link a volume for the dev environment?
     For production we should probably just install everything fresh? Load time is pretty bad though...
**** TODO Monitor for time drift 
     This appears to be a macos problem only.

